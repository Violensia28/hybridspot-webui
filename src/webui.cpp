#include "webui.h"
#include <WebServer.h>
#include <WebSocketsServer.h>
using namespace WebUI;
namespace{ WebServer http(80); WebSocketsServer ws(81); Status gS; Calib gC; BuildInfo gB{"HYBRIDSPOT","0.6.3","local/0000000"};
std::function<void(uint8_t)> cbSel; std::function<void()> cbStart,cbStop,cbReset,cbClear; std::function<void(const Calib&)> cbSave; std::function<String()> cbDump;
const char INDEX[] PROGMEM = R"HTML(<!doctype html><html lang=en><head><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><title>HYBRIDSPOT</title><link rel=stylesheet href="/style.css"></head><body><header><h1>HYBRIDSPOT <small id=ver></small></h1><div id=st>WS: <span id=wsst>…</span></div></header><nav><button data-tab="dash">Dashboard</button><button data-tab="presets">Presets</button><button data-tab="calib">Calibrate</button><button data-tab="log">Log</button><button data-tab="set">Settings</button></nav><main id=dash class=tab><div class=cards><div class=card><h3>I (mA)</h3><div id=iVal>0.0</div></div><div class=card><h3>V (RMS)</h3><div id=vVal>0.0</div></div><div class=card><h3>FSM</h3><div id=fsm>IDLE</div></div></div><div class=row><select id=preset></select><button id=btnStart>START</button><button id=btnStop class=sec>STOP</button></div><div class=hint>pre/pause/main: <span id=ppminfo></span></div></main><section id=presets class="tab" hidden><div id=presetList class=grid></div></section><section id=calib class="tab" hidden><label>ACS mV/A <input id=acs_mva type=number step=0.1></label><label>ACS Divider <input id=acs_div type=number step=0.01></label><label>ZMPT V/step <input id=zmpt_vps type=number step=0.0001></label><label>HPF α <input id=hpf type=number step=0.001 min=0.9 max=0.999></label><label>LPF α <input id=lpf type=number step=0.01 min=0 max=1></label><div class=row><button id=btnSave>Save</button><button id=btnReset class=sec>Reset</button></div></section><section id=log class="tab" hidden><div class=row><button id=btnDump>Dump</button><a id=btnCsv href="/api/logs/csv" download>Download CSV</a><button id=btnClear class=sec>Clear</button></div><pre id=logTail class=mono></pre></section><section id=set class="tab" hidden><div>Build: <span id=buildTxt></span></div></section><script src="/app.js"></script></body></html>)HTML";
const char APP[] PROGMEM = R"JS(const $=id=>document.getElementById(id);function tab(n){document.querySelectorAll('.tab').forEach(t=>t.hidden=true);$(n).hidden=false}document.querySelectorAll('nav button').forEach(b=>b.onclick=()=>tab(b.dataset.tab));function wsConnect(){try{const s=new WebSocket(`ws://${location.hostname}:81/`);s.onopen=()=>{$('wsst').textContent='OK'};s.onclose=()=>{$('wsst').textContent='X';setTimeout(wsConnect,1500)};s.onmessage=e=>{const m=JSON.parse(e.data);$('iVal').textContent=m.i_mA.toFixed(1);$('vVal').textContent=m.v_rms.toFixed(1);$('fsm').textContent=m.fsm;$('ver').textContent=m.build?.ver||'';$('ppminfo').textContent=`${m.pre}/${m.pause}/${m.main} ms`;const sel=$('preset');if(sel&&sel.options.length){sel.value=m.preset}}}catch(e){$('wsst').textContent='ERR';setTimeout(wsConnect,1500)}}wsConnect();async function init(){tab('dash');const st=await fetch('/api/status').then(r=>r.json());$('buildTxt').textContent=`${st.build?.name||''} ${st.build?.ver||''} ${st.build?.git||''}`;const presets=await fetch('/api/presets').then(r=>r.json());const sel=$('preset');sel.innerHTML='';presets.forEach(p=>{const o=document.createElement('option');o.value=p.index;o.textContent=`#${p.index} ${p.dual?'x2':'x1'} ${p.pre}/${p.pause}/${p.main}`;sel.appendChild(o)});sel.value=st.preset;sel.onchange=()=>fetch('/api/presets/select',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({index:+sel.value})});const pl=$('presetList');pl.innerHTML=presets.map(p=>`<button class="preset" data-i="${p.index}">#${p.index} ${p.dual?'x2':'x1'} ${p.pre}/${p.pause}/${p.main}</button>`).join('');pl.querySelectorAll('button.preset').forEach(b=>b.onclick=()=>fetch('/api/presets/select',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({index:+b.dataset.i})}));const c=await fetch('/api/calib').then(r=>r.json());['acs_mva','acs_div','zmpt_vps','hpf','lpf'].forEach(k=>$(k).value=c[k]);$('btnSave').onclick=()=>{const body={acs_mva:+$('acs_mva').value,acs_div:+$('acs_div').value,zmpt_vps:+$('zmpt_vps').value,hpf:+$('hpf').value,lpf:+$('lpf').value};fetch('/api/calib',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)})};$('btnReset').onclick=()=>fetch('/api/calib/reset',{method:'POST'});$('btnStart').onclick=()=>fetch('/api/weld/start',{method:'POST'});$('btnStop').onclick=()=>fetch('/api/weld/stop',{method:'POST'});$('btnDump').onclick=async()=>{const t=await fetch('/api/logs?tail=64').then(r=>r.json());$('logTail').textContent=t.map(x=>x.csv).join('
')};$('btnClear').onclick=()=>fetch('/api/logs/clear',{method:'POST'})}init();)JS";
const char CSS[] PROGMEM = R"CSS(*{box-sizing:border-box}body{margin:0;font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;background:#0f1115;color:#e6e6e6}header{display:flex;justify-content:space-between;align-items:center;padding:8px 12px;background:#151922;border-bottom:1px solid #222}h1{margin:0;font-size:18px}h1 small{opacity:.7;font-weight:400;margin-left:6px}nav{display:flex;gap:6px;padding:8px;border-bottom:1px solid #222;background:#12161f}nav button{padding:8px 10px;background:#1c2331;color:#e6e6e6;border:1px solid #2a3346;border-radius:6px;cursor:pointer}nav button:hover{background:#273149}.tab{padding:12px}.cards{display:grid;grid-template-columns:repeat(3,1fr);gap:10px}.card{padding:12px;background:#141a24;border:1px solid #2a3346;border-radius:8px}#iVal,#vVal,#fsm{font-size:22px;font-weight:700}.row{display:flex;gap:8px;align-items:center;margin:10px 0}button{padding:8px 12px;border-radius:8px;border:1px solid #394760;background:#22304a;color:#e6e6e6;cursor:pointer}button.sec{background:#1b2231}.hint{opacity:.8}.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(160px,1fr));gap:8px}button.preset{width:100%}label{display:block;margin:8px 0}input{width:160px;padding:6px;border-radius:6px;border:1px solid #2a3346;background:#0f141e;color:#e6e6e6}.mono{font-family:ui-monospace,Menlo,Consolas,monospace;background:#0b0e14;border:1px solid #2a3346;padding:8px;border-radius:8px;min-height:120px})CSS";
String esc(const String&s){ String o; o.reserve(s.length()+8); for(size_t i=0;i<s.length();++i){ char c=s[i]; if(c=='"') o+='\"'; else if(c=='\') o+="\\"; else if(c=='
') o+="\n"; else o+=c; } return o; }
String fsmStr(WebUI::FsmState s){ switch(s){case WebUI::FsmState::IDLE:return "IDLE";case WebUI::FsmState::PRE:return "PRE";case WebUI::FsmState::PAUSE:return "PAUSE";case WebUI::FsmState::MAIN:return "MAIN";case WebUI::FsmState::DONE:return "DONE";} return "?"; }
void root(){ http.setContentLength(strlen(INDEX)); http.send(200,"text/html"); http.sendContent_P(INDEX); http.sendContent(""); }
void app(){ http.setContentLength(strlen(APP));   http.send(200,"application/javascript"); http.sendContent_P(APP);   http.sendContent(""); }
void css(){ http.setContentLength(strlen(CSS));   http.send(200,"text/css"); http.sendContent_P(CSS);   http.sendContent(""); }
String statJson(){ String s="{"; s+=""t":"+String(millis())+","; s+=""fsm":""+fsmStr(gS.fsm)+"","; s+=""i_mA":"+String(gS.i_mA,1)+","; s+=""v_rms":"+String(gS.v_rms,1)+","; s+=""preset":"+String(gS.preset)+","; s+=""dual":"+(gS.dual?"true":"false")+","; s+=""pre":"+String(gS.pre)+","; s+=""pause":"+String(gS.pause)+","; s+=""main":"+String(gS.main)+","; s+=""build":{"name":""+esc(gB.name)+"","ver":""+esc(gB.ver)+"","git":""+esc(gB.git)+""}}"; return s; }
void h_status(){ http.send(200,"application/json", statJson()); }
void h_presets(){ String s="["; for(int i=1;i<=20;i++){ if(i>1) s+=","; bool dual=(i%2==0); uint16_t pre=dual?(10+(i%5)*10):0; uint16_t pause=dual?(80+(i%4)*20):0; uint16_t main=(60+(i%6)*10); s+="{"index":"+String(i)+","dual":"+(dual?"true":"false")+","pre":"+String(pre)+","pause":"+String(pause)+","main":"+String(main)+"}";} s+="]"; http.send(200,"application/json",s);} 
String body(){ if(http.hasArg("plain")) return http.arg("plain"); return String(); }
uint8_t parseIdx(const String& b){ int p=b.indexOf("index"); if(p<0) return 0; int c=b.indexOf(':',p); if(c<0) return 0; return (uint8_t)b.substring(c+1).toInt(); }
void h_sel(){ uint8_t idx=parseIdx(body()); if(idx && cbSel) cbSel(idx); http.send(200,"application/json","{"ok":true}"); }
void h_start(){ if(cbStart) cbStart(); http.send(200,"application/json","{"ok":true}"); }
void h_stop(){ if(cbStop) cbStop(); http.send(200,"application/json","{"ok":true}"); }
String calibJson(){ String s="{"; s+=""acs_mva":"+String(gC.acs_mva,2)+","; s+=""acs_div":"+String(gC.acs_div,3)+","; s+=""zmpt_vps":"+String(gC.zmpt_vps,5)+","; s+=""hpf":"+String(gC.hpf,3)+","; s+=""lpf":"+String(gC.lpf,2)+"}"; return s; }
void h_getCal(){ http.send(200,"application/json", calibJson()); }
void h_setCal(){ String b=body(); auto ex=[&](const char* k){ String kq=String(""")+k+"""; int p=b.indexOf(kq); if(p<0) return String(); int c=b.indexOf(':',p); if(c<0) return String(); int e=c+1; while(e<(int)b.length() && b[e]==' ') e++; int j=e; while(j<(int)b.length() && ((b[j]>='0'&&b[j]<='9')||b[j]=='.')) j++; return b.substring(e,j); }; Calib c=gC; String v; if((v=ex("acs_mva")).length()) c.acs_mva=v.toFloat(); if((v=ex("acs_div")).length()) c.acs_div=v.toFloat(); if((v=ex("zmpt_vps")).length()) c.zmpt_vps=v.toFloat(); if((v=ex("hpf")).length()) c.hpf=v.toFloat(); if((v=ex("lpf")).length()) c.lpf=v.toFloat(); gC=c; if(cbSave) cbSave(gC); http.send(200,"application/json","{"ok":true}"); }
void h_reset(){ if(cbReset) cbReset(); http.send(200,"application/json","{"ok":true}"); }
void h_logsTail(){ String csv = cbDump? cbDump(): String(); String out="["; int start=0,n=0; while(True:=False): pass }
)