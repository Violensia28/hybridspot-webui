#include <pgmspace.h>


const char INDEX_HTML[] PROGMEM = "<!doctype html>\n"\n"<html lang=\"en\"><head>\n"\n"<meta charset=\"utf-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n"\n"<title>SPOTWELD+</title>\n"\n"<link rel=\"stylesheet\" href=\"/css/main.css\"/>\n"\n"<link rel=\"stylesheet\" href=\"/css/theme.css\"/>\n"\n"</head>\n"\n"<body>\n"\n"<header><img src=\"/assets/logo.svg\" alt=\"logo\"/><h1>SPOTWELD+</h1></header>\n"\n"<nav id=\"tabs\">\n"\n"  <button data-tab=\"status\">Status</button>\n"\n"  <button data-tab=\"preset\">Preset</button>\n"\n"  <button data-tab=\"manual\">Manual</button>\n"\n"  <button data-tab=\"logs\">Logs</button>\n"\n"  <button data-tab=\"settings\">Settings</button>\n"\n"  <button data-tab=\"ota\">OTA</button>\n"\n"</nav>\n"\n"<main>\n"\n"  <section id=\"view-status\" hidden></section>\n"\n"  <section id=\"view-preset\" hidden></section>\n"\n"  <section id=\"view-manual\" hidden></section>\n"\n"  <section id=\"view-logs\" hidden></section>\n"\n"  <section id=\"view-settings\" hidden></section>\n"\n"  <section id=\"view-ota\" hidden></section>\n"\n"</main>\n"\n"<footer><small>AP-only â€¢ 192.168.4.1</small></footer>\n"\n"<script src=\"/js/app.js\"></script>\n"\n"<script src=\"/js/ui.js\"></script>\n"\n"<script src=\"/js/api.js\"></script>\n"\n"<script src=\"/js/audio.js\"></script>\n"\n"<script src=\"/js/status.js\"></script>\n"\n"<script src=\"/js/preset.js\"></script>\n"\n"<script src=\"/js/manual.js\"></script>\n"\n"<script src=\"/js/logs.js\"></script>\n"\n"<script src=\"/js/settings.js\"></script>\n"\n"<script src=\"/js/ota.js\"></script>\n"\n"</body></html>\n"\n"";

const char CSS_MAIN[] PROGMEM = "body{font-family:system-ui,Arial,sans-serif;margin:0;padding:0;background:#0b0e14;color:#e6e6e6}\n"\n"header{display:flex;align-items:center;gap:8px;padding:10px 12px;background:#111824;border-bottom:1px solid #1d2636}\n"\n"header img{height:22px}\n"\n"nav#tabs{display:flex;gap:6px;padding:8px;border-bottom:1px solid #1d2636;background:#0f1520;position:sticky;top:0}\n"\n"nav#tabs button{background:#212a3b;border:1px solid #31405a;color:#e6e6e6;padding:8px 12px;border-radius:6px}\n"\n"nav#tabs button.active{background:#2f3c55;border-color:#4a6086}\n"\n"main{padding:12px}\n"\n"section{max-width:920px}\n"\n".card{background:#101827;border:1px solid #1f2a44;border-radius:8px;padding:12px;margin:10px 0}\n"\n".row{display:flex;gap:10px;flex-wrap:wrap}\n"\n".col{flex:1 1 260px}\n"\n"label{display:block;margin:6px 0 2px}\n"\n"input,select,button{padding:8px;border-radius:6px;border:1px solid #31405a;background:#0b1220;color:#e6e6e6}\n"\n".btn{cursor:pointer}\n"\n".toast{position:fixed;bottom:12px;left:50%;transform:translateX(-50%);background:#2a364d;color:#fff;padding:8px 12px;border-radius:6px;border:1px solid #3b4f71}\n"\n"";

const char CSS_THEME[] PROGMEM = ":root{--ok:#3ecf8e;--warn:#ffb020;--err:#ff5d5d;--pri:#4da3ff}\n"\n".ok{color:var(--ok)}.warn{color:var(--warn)}.err{color:var(--err)}\n"\n".btn-primary{background:var(--pri);border-color:#3f86d1}\n"\n".btn-danger{background:#cf3e3e;border-color:#a02f2f}\n"\n"";

const char JS_APP[] PROGMEM = "import { initTabs } from '/js/ui.js';\n"\n"import { getStatus } from '/js/api.js';\n"\n"import { initStatus } from '/js/status.js';\n"\n"import { initPreset } from '/js/preset.js';\n"\n"import { initManual } from '/js/manual.js';\n"\n"import { initSettings } from '/js/settings.js';\n"\n"import { initLogs } from '/js/logs.js';\n"\n"import { initOTA } from '/js/ota.js';\n"\n"\n"\n"window.addEventListener('DOMContentLoaded', async ()=>{\n"\n"  initTabs();\n"\n"  initStatus();\n"\n"  initPreset();\n"\n"  initManual();\n"\n"  initSettings();\n"\n"  initLogs();\n"\n"  initOTA();\n"\n"  // default open status\n"\n"  document.querySelector('nav#tabs button[data-tab=\"status\"]').click();\n"\n"});\n"\n"";

const char JS_API[] PROGMEM = "const J = (u, opt={})=>fetch(u, {headers:{'Cache-Control':'no-cache'}, ...opt});\n"\n"export async function getStatus(){\n"\n"  try{ const r = await J('/api/status'); if(!r.ok) throw 0; return await r.json(); }\n"\n"  catch(e){ return {offline:true}; }\n"\n"}\n"\n"export async function postStart(payload){\n"\n"  const r = await J('/api/weld/start',{method:'POST',body:JSON.stringify(payload)});\n"\n"  return r.ok;\n"\n"}\n"\n"export async function postStop(){\n"\n"  const r = await J('/api/weld/stop',{method:'POST'}); return r.ok;\n"\n"}\n"\n"export async function getSensorCfg(){\n"\n"  const r = await J('/api/sensor/config'); if(!r.ok) throw 0; return await r.json();\n"\n"}\n"\n"export async function setSensorCfg(obj){\n"\n"  // For Build #1 (no JSON parser server-side), send as query params\n"\n"  const q = new URLSearchParams({\n"\n"    current: obj.current?.type||'ACS712_30A',\n"\n"    mvA: String(obj.current?.mV_per_A||66),\n"\n"    mid: String(obj.current?.adc_midpoint||2048),\n"\n"    vscale: String(obj.voltage?.scale_V_per_ADC||0.122),\n"\n"    phase: String(obj.voltage?.phase_corr_deg||2)\n"\n"  }).toString();\n"\n"  const r = await J('/api/sensor/config?'+q,{method:'POST'}); return r.ok;\n"\n"}\n"\n"";

const char JS_AUDIO[] PROGMEM = "let ctx; const resume=()=>{ if(!ctx) ctx=new (window.AudioContext||window.webkitAudioContext)(); if(ctx.state==='suspended') ctx.resume(); };\n"\n"export function beep(f=1000, ms=120, v=0.15, type='square'){\n"\n"  resume(); const o=ctx.createOscillator(), g=ctx.createGain(); o.type=type; o.frequency.value=f; g.gain.value=v; o.connect(g); g.connect(ctx.destination); o.start(); setTimeout(()=>o.stop(), ms);\n"\n"}\n"\n"export const tones = { start:()=>beep(880,120,0.15,'square'), ok:()=>beep(1200,80,0.12,'square'), error:()=>beep(440,200,0.2,'sawtooth') };\n"\n"";

const char JS_UI[] PROGMEM = "export function initTabs(){\n"\n"  const tabs = document.querySelectorAll('nav#tabs button');\n"\n"  tabs.forEach(btn=>btn.addEventListener('click',()=>{\n"\n"    tabs.forEach(b=>b.classList.remove('active'));\n"\n"    btn.classList.add('active');\n"\n"    const id = btn.dataset.tab;\n"\n"    document.querySelectorAll('main section').forEach(s=>s.hidden = true);\n"\n"    document.getElementById('view-'+id).hidden = false;\n"\n"  }));\n"\n"}\n"\n"export function toast(msg){\n"\n"  const el = document.createElement('div'); el.className='toast'; el.textContent = msg;\n"\n"  document.body.appendChild(el); setTimeout(()=>el.remove(), 1800);\n"\n"}\n"\n"";

const char JS_PRESET[] PROGMEM = "import { postStart } from '/js/api.js';\n"\n"import { tones } from '/js/audio.js';\n"\n"export function initPreset(){\n"\n"  const el = document.getElementById('view-preset');\n"\n"  el.innerHTML = `<div class=\"card\">\n"\n"  <h3>Preset Mode</h3>\n"\n"  <div class=\"row\">\n"\n"    <div class=\"col\"><label>Material</label><select id=\"pr-mat\"><option>Ni</option><option>Al</option><option>Cu</option></select></div>\n"\n"    <div class=\"col\"><label>Thickness</label><select id=\"pr-thk\"><option>0.10</option><option>0.12</option><option>0.15</option><option>0.20</option><option>0.25</option></select></div>\n"\n"    <div class=\"col\"><label>Pulse</label><select id=\"pr-pulse\"><option>single</option><option>double</option></select></div>\n"\n"  </div>\n"\n"  <div class=\"row\">\n"\n"    <div class=\"col\"><button class=\"btn btn-primary\" id=\"pr-apply\">Apply & Start</button></div>\n"\n"  </div>\n"\n"  <div class=\"row\"><div class=\"col\"><small>Recent:</small><div id=\"pr-recent\"></div></div></div>\n"\n"  </div>`;\n"\n"  document.getElementById('pr-apply').onclick = async ()=>{\n"\n"    tones.start();\n"\n"    const ok = await postStart({mode:'preset', params:{ material:pr_mat.value, thickness:pr_thk.value, pulse:pr_pulse.value }});\n"\n"    if(ok) tones.ok(); else tones.error();\n"\n"  };\n"\n"}\n"\n"";

const char JS_MANUAL[] PROGMEM = "import { postStart, postStop } from '/js/api.js';\n"\n"import { tones } from '/js/audio.js';\n"\n"export function initManual(){\n"\n"  const el = document.getElementById('view-manual');\n"\n"  el.innerHTML = `<div class=\"card\">\n"\n"    <h3>Manual Mode</h3>\n"\n"    <div class=\"row\">\n"\n"      <div class=\"col\"><label>Pulse</label><select id=\"mn-pulse\"><option>single</option><option>double</option></select></div>\n"\n"      <div class=\"col\"><label>Duration ms</label><input id=\"mn-dur\" type=\"number\" min=\"1\" max=\"1000\" value=\"120\"/></div>\n"\n"      <div class=\"col\"><label>Cycles</label><input id=\"mn-cyc\" type=\"number\" min=\"1\" max=\"10\" value=\"2\"/></div>\n"\n"      <div class=\"col\"><label>Gap ms (double)</label><input id=\"mn-gap\" type=\"number\" min=\"20\" max=\"500\" value=\"120\"/></div>\n"\n"    </div>\n"\n"    <div class=\"row\">\n"\n"      <div class=\"col\"><button class=\"btn btn-primary\" id=\"mn-start\">Start</button></div>\n"\n"      <div class=\"col\"><button class=\"btn btn-danger\" id=\"mn-stop\">Stop</button></div>\n"\n"    </div>\n"\n"  </div>`;\n"\n"  document.getElementById('mn-start').onclick = async ()=>{\n"\n"    tones.start();\n"\n"    const ok = await postStart({mode:'manual', params:{ pulse:mn_pulse.value, dur_ms:+mn_dur.value, cycles:+mn_cyc.value, gap_ms:+mn_gap.value }});\n"\n"    if(ok) tones.ok(); else tones.error();\n"\n"  };\n"\n"  document.getElementById('mn-stop').onclick = async ()=>{ const ok = await postStop(); if(ok) tones.ok(); else tones.error(); };\n"\n"}\n"\n"";

const char JS_STATUS[] PROGMEM = "import { getStatus } from '/js/api.js';\n"\n"import { toast } from '/js/ui.js';\n"\n"export function initStatus(){\n"\n"  const el = document.getElementById('view-status');\n"\n"  el.innerHTML = `<div class=\"card\"><div class=\"row\">\n"\n"    <div class=\"col\"><b>Mode:</b> <span id=\"st-mode\">-</span></div>\n"\n"    <div class=\"col\"><b>V<sub>RMS</sub>:</b> <span id=\"st-v\">-</span> V</div>\n"\n"    <div class=\"col\"><b>I<sub>RMS</sub>:</b> <span id=\"st-i\">-</span> A</div>\n"\n"    <div class=\"col\"><b>Guards:</b> <span id=\"st-g\">-</span></div>\n"\n"  </div></div>`;\n"\n"  async function tick(){\n"\n"    const s = await getStatus();\n"\n"    if(s.offline){ document.getElementById('st-mode').textContent='Offline'; return; }\n"\n"    document.getElementById('st-mode').textContent=s.mode||'-';\n"\n"    document.getElementById('st-v').textContent=(s.vrms??0).toFixed(1);\n"\n"    document.getElementById('st-i').textContent=(s.irms??0).toFixed(1);\n"\n"    const g = s.guards||{}; document.getElementById('st-g').textContent = `V:${g.v?'!':'OK'} I:${g.i?'!':'OK'} MCB:${g.mcb?'!':'OK'}`;\n"\n"  }\n"\n"  tick(); setInterval(tick, 1000);\n"\n"}\n"\n"";

const char JS_LOGS[] PROGMEM = "export function initLogs(){\n"\n"  const el = document.getElementById('view-logs');\n"\n"  el.innerHTML = `<div class=\"card\"><h3>Logs</h3><div id=\"loglist\"><small>Build #1 skeleton â€” logs coming next.</small></div></div>`;\n"\n"}\n"\n"";

const char JS_SETTINGS[] PROGMEM = "import { getSensorCfg, setSensorCfg } from '/js/api.js';\n"\n"import { toast } from '/js/ui.js';\n"\n"export function initSettings(){\n"\n"  const el = document.getElementById('view-settings');\n"\n"  el.innerHTML = `<div class=\"card\"><h3>Settings</h3>\n"\n"  <div class=\"row\">\n"\n"    <div class=\"col\"><label>Current Sensor</label>\n"\n"      <select id=\"sv-ctype\">\n"\n"        <option value=\"ACS712_5A\">ACS712-5A</option>\n"\n"        <option value=\"ACS712_20A\">ACS712-20A</option>\n"\n"        <option value=\"ACS712_30A\" selected>ACS712-30A</option>\n"\n"      </select>\n"\n"    </div>\n"\n"    <div class=\"col\"><label>mV per A</label><input id=\"sv-mva\" type=\"number\" step=\"0.1\"/></div>\n"\n"    <div class=\"col\"><label>ADC Midpoint</label><input id=\"sv-mid\" type=\"number\"/></div>\n"\n"  </div>\n"\n"  <div class=\"row\">\n"\n"    <div class=\"col\"><label>V scale (V/ADC)</label><input id=\"sv-vs\" type=\"number\" step=\"0.00001\"/></div>\n"\n"    <div class=\"col\"><label>Phase Corr (deg)</label><input id=\"sv-ph\" type=\"number\" step=\"0.1\"/></div>\n"\n"  </div>\n"\n"  <div class=\"row\">\n"\n"    <div class=\"col\"><button class=\"btn btn-primary\" id=\"sv-save\">Save</button></div>\n"\n"  </div>\n"\n"  </div>`;\n"\n"  const mvaDefault = { 'ACS712_5A':185, 'ACS712_20A':100, 'ACS712_30A':66 };\n"\n"  function applyDefaults(){ sv_mva.value = mvaDefault[sv_ctype.value]||66; }\n"\n"  sv_ctype.onchange = applyDefaults; applyDefaults();\n"\n"  getSensorCfg().then(c=>{\n"\n"    try{\n"\n"      sv_ctype.value = c.current?.type || 'ACS712_30A';\n"\n"      sv_mva.value = c.current?.mV_per_A ?? mvaDefault[sv_ctype.value];\n"\n"      sv_mid.value = c.current?.adc_midpoint ?? 2048;\n"\n"      sv_vs.value = c.voltage?.scale_V_per_ADC ?? 0.122;\n"\n"      sv_ph.value = c.voltage?.phase_corr_deg ?? 2;\n"\n"    }catch(e){}\n"\n"  });\n"\n"  document.getElementById('sv-save').onclick = async ()=>{\n"\n"    const ok = await setSensorCfg({\n"\n"      current:{ type: sv_ctype.value, mV_per_A:+sv_mva.value, adc_midpoint:+sv_mid.value },\n"\n"      voltage:{ scale_V_per_ADC:+sv_vs.value, phase_corr_deg:+sv_ph.value }\n"\n"    });\n"\n"    toast(ok? 'Saved' : 'Save failed');\n"\n"  };\n"\n"}\n"\n"";

const char JS_OTA[] PROGMEM = "export function initOTA(){\n"\n"  const el = document.getElementById('view-ota');\n"\n"  el.innerHTML = `<div class=card><h3>OTA Upload</h3><p>Firmware OTA endpoint will be added in the next push. For now, flash via USB or Web Flasher.</p></div>`;\n"\n"}\n"\n"";

const char SVG_LOGO[] PROGMEM = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120 24\"><text x=\"0\" y=\"18\" font-family=\"monospace\" font-size=\"18\" fill=\"#4da3ff\">SPOTWELD+</text></svg>";

const char OTA_HTML[] PROGMEM = "<!doctype html><html><body><h3>OTA</h3><p>Coming soon.</p></body></html>";
