#include <pgmspace.h>

const char INDEX_HTML[] PROGMEM = "<!doctype html>\n<html lang=\"en\"><head>\n<meta charset=\"utf-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n<title>SPOTWELD+</title>\n<link rel=\"stylesheet\" href=\"/css/main.css\"/>\n<link rel=\"stylesheet\" href=\"/css/theme.css\"/>\n</head>\n<body>\n<header><img src=\"/assets/logo.svg\" alt=\"logo\"/><h1>SPOTWELD+</h1></header>\n<nav id=\"tabs\">\n  <button data-tab=\"status\">Status</button>\n  <button data-tab=\"preset\">Preset</button>\n  <button data-tab=\"manual\">Manual</button>\n  <button data-tab=\"logs\">Logs</button>\n  <button data-tab=\"settings\">Settings</button>\n  <button data-tab=\"ota\">OTA</button>\n</nav>\n<main>\n  <section id=\"view-status\" hidden></section>\n  <section id=\"view-preset\" hidden></section>\n  <section id=\"view-manual\" hidden></section>\n  <section id=\"view-logs\" hidden></section>\n  <section id=\"view-settings\" hidden></section>\n  <section id=\"view-ota\" hidden></section>\n</main>\n<footer><small>AP-only • 192.168.4.1</small></footer>\n<script src=\"/js/app.js\"></script>\n<script src=\"/js/ui.js\"></script>\n<script src=\"/js/api.js\"></script>\n<script src=\"/js/audio.js\"></script>\n<script src=\"/js/status.js\"></script>\n<script src=\"/js/preset.js\"></script>\n<script src=\"/js/manual.js\"></script>\n<script src=\"/js/logs.js\"></script>\n<script src=\"/js/settings.js\"></script>\n<script src=\"/js/ota.js\"></script>\n</body></html>";
const char CSS_MAIN[] PROGMEM = "body{font-family:system-ui,Arial,sans-serif;margin:0;padding:0;background:#0b0e14;color:#e6e6e6}\nheader{display:flex;align-items:center;gap:8px;padding:10px 12px;background:#111824;border-bottom:1px solid #1d2636}\nheader img{height:22px}\nnav#tabs{display:flex;gap:6px;padding:8px;border-bottom:1px solid #1d2636;background:#0f1520;position:sticky;top:0}\nnav#tabs button{background:#212a3b;border:1px solid #31405a;color:#e6e6e6;padding:8px 12px;border-radius:6px}\nnav#tabs button.active{background:#2f3c55;border-color:#4a6086}\nmain{padding:12px}\nsection{max-width:920px}\n.card{background:#101827;border:1px solid #1f2a44;border-radius:8px;padding:12px;margin:10px 0}\n.row{display:flex;gap:10px;flex-wrap:wrap}\n.col{flex:1 1 260px}\nlabel{display:block;margin:6px 0 2px}\ninput,select,button{padding:8px;border-radius:6px;border:1px solid #31405a;background:#0b1220;color:#e6e6e6}\n.btn{cursor:pointer}\n.toast{position:fixed;bottom:12px;left:50%;transform:translateX(-50%);background:#2a364d;color:#fff;padding:8px 12px;border-radius:6px;border:1px solid #3b4f71}";
const char CSS_THEME[] PROGMEM = ":root{--ok:#3ecf8e;--warn:#ffb020;--err:#ff5d5d;--pri:#4da3ff}\n.ok{color:var(--ok)}.warn{color:var(--warn)}.err{color:var(--err)}\n.btn-primary{background:var(--pri);border-color:#3f86d1}\n.btn-danger{background:#cf3e3e;border-color:#a02f2f}";
const char JS_APP[] PROGMEM = "import { initTabs } from \"/js/ui.js\";\nimport { initStatus } from \"/js/status.js\";\nimport { initPreset } from \"/js/preset.js\";\nimport { initManual } from \"/js/manual.js\";\nimport { initSettings } from \"/js/settings.js\";\nimport { initLogs } from \"/js/logs.js\";\nimport { initOTA } from \"/js/ota.js\";\nwindow.addEventListener(\"DOMContentLoaded\",()=>{initTabs();initStatus();initPreset();initManual();initSettings();initLogs();initOTA();document.querySelector(\"nav#tabs button[data-tab=\"status\"]\").click();});";
const char JS_API[] PROGMEM = "const J=(u,opt={})=>fetch(u,{headers:{\"Cache-Control\":\"no-cache\"},...opt});\nexport async function getStatus(){try{const r=await J(\"/api/status\");if(!r.ok)throw 0;return await r.json()}catch(e){return{offline:true}}}\nexport async function postStart(p){const r=await J(\"/api/weld/start\",{method:\"POST\",body:JSON.stringify(p)});return r.ok}\nexport async function postStop(){const r=await J(\"/api/weld/stop\",{method:\"POST\"});return r.ok}\nexport async function getSensorCfg(){const r=await J(\"/api/sensor/config\");if(!r.ok)throw 0;return await r.json()}\nexport async function setSensorCfg(o){const q=new URLSearchParams({current:o.current?.type||\"ACS712_30A\",mvA:String(o.current?.mV_per_A||66),mid:String(o.current?.adc_midpoint||2048),vscale:String(o.voltage?.scale_V_per_ADC||0.122),phase:String(o.voltage?.phase_corr_deg||2)}).toString();const r=await J(\"/api/sensor/config?\"+q,{method:\"POST\"});return r.ok}";
const char JS_AUDIO[] PROGMEM = "let c;const r=()=>{c||(c=new(window.AudioContext||window.webkitAudioContext)),\"suspended\"===c.state&&c.resume()};export function beep(f=1e3,m=120,v=.15,t=\"square\"){r();const o=c.createOscillator(),g=c.createGain();o.type=t,o.frequency.value=f,g.gain.value=v,o.connect(g),g.connect(c.destination),o.start(),setTimeout(()=>o.stop(),m)}export const tones={start:()=>beep(880,120,.15,\"square\"),ok:()=>beep(1200,80,.12,\"square\"),error:()=>beep(440,200,.2,\"sawtooth\")}";
const char JS_UI[] PROGMEM = "export function initTabs(){const t=document.querySelectorAll(\"nav#tabs button\");t.forEach(e=>e.addEventListener(\"click\",()=>{t.forEach(b=>b.classList.remove(\"active\")),e.classList.add(\"active\");const a=e.dataset.tab;document.querySelectorAll(\"main section\").forEach(s=>s.hidden=!0),document.getElementById(\"view-\"+a).hidden=!1}))}export function toast(t){const e=document.createElement(\"div\");e.className=\"toast\",e.textContent=t,document.body.appendChild(e),setTimeout(()=>e.remove(),1800)}";
const char JS_PRESET[] PROGMEM = "import{postStart}from\"/js/api.js\";import{tones}from\"/js/audio.js\";export function initPreset(){const e=document.getElementById(\"view-preset\");e.innerHTML=`<div class=\"card\">\n<h3>Preset Mode</h3>\n<div class=\"row\">\n  <div class=\"col\"><label>Material</label><select id=\"pr-mat\"><option>Ni</option><option>Al</option><option>Cu</option></select></div>\n  <div class=\"col\"><label>Thickness</label><select id=\"pr-thk\"><option>0.10</option><option>0.12</option><option>0.15</option><option>0.20</option><option>0.25</option></select></div>\n  <div class=\"col\"><label>Pulse</label><select id=\"pr-pulse\"><option>single</option><option>double</option></select></div>\n</div>\n<div class=\"row\">\n  <div class=\"col\"><button class=\"btn btn-primary\" id=\"pr-apply\">Apply & Start</button></div>\n</div>\n<div class=\"row\"><div class=\"col\"><small>Recent:</small><div id=\"pr-recent\"></div></div></div>\n</div>`;document.getElementById(\"pr-apply\").onclick=async()=>{tones.start();const e=await postStart({mode:\"preset\",params:{material:pr_mat.value,thickness:pr_thk.value,pulse:pr_pulse.value}});e?tones.ok():tones.error()}}";
const char JS_MANUAL[] PROGMEM = "import{postStart,postStop}from\"/js/api.js\";import{tones}from\"/js/audio.js\";export function initManual(){const e=document.getElementById(\"view-manual\");e.innerHTML=`<div class=\"card\">\n<h3>Manual Mode</h3>\n<div class=\"row\">\n  <div class=\"col\"><label>Pulse</label><select id=\"mn-pulse\"><option>single</option><option>double</option></select></div>\n  <div class=\"col\"><label>Duration ms</label><input id=\"mn-dur\" type=\"number\" min=\"1\" max=\"1000\" value=\"120\"/></div>\n  <div class=\"col\"><label>Cycles</label><input id=\"mn-cyc\" type=\"number\" min=\"1\" max=\"10\" value=\"2\"/></div>\n  <div class=\"col\"><label>Gap ms (double)</label><input id=\"mn-gap\" type=\"number\" min=\"20\" max=\"500\" value=\"120\"/></div>\n</div>\n<div class=\"row\">\n  <div class=\"col\"><button class=\"btn btn-primary\" id=\"mn-start\">Start</button></div>\n  <div class=\"col\"><button class=\"btn btn-danger\" id=\"mn-stop\">Stop</button></div>\n</div>\n</div>`;document.getElementById(\"mn-start\").onclick=async()=>{tones.start();const e=await postStart({mode:\"manual\",params:{pulse:mn_pulse.value,dur_ms:+mn_dur.value,cycles:+mn_cyc.value,gap_ms:+mn_gap.value}});e?tones.ok():tones.error()},document.getElementById(\"mn-stop\").onclick=async()=>{const e=await postStop();e?tones.ok():tones.error()}}";
const char JS_STATUS[] PROGMEM = "import{getStatus}from\"/js/api.js\";export function initStatus(){const e=document.getElementById(\"view-status\");e.innerHTML=`<div class=\"card\"><div class=\"row\">\n<div class=\"col\"><b>Mode:</b> <span id=\"st-mode\">-</span></div>\n<div class=\"col\"><b>V<sub>RMS</sub>:</b> <span id=\"st-v\">-</span> V</div>\n<div class=\"col\"><b>I<sub>RMS</sub>:</b> <span id=\"st-i\">-</span> A</div>\n<div class=\"col\"><b>Guards:</b> <span id=\"st-g\">-</span></div>\n</div></div>`;async function t(){const t=await getStatus();if(t.offline){return void(document.getElementById(\"st-mode\").textContent=\"Offline\");}document.getElementById(\"st-mode\").textContent=t.mode||\"-\",document.getElementById(\"st-v\").textContent=(null!=t.vrms?t.vrms:0).toFixed(1),document.getElementById(\"st-i\").textContent=(null!=t.irms?t.irms:0).toFixed(1);const e=t.guards||{};document.getElementById(\"st-g\").textContent=`V:${e.v?\"!\":\"OK\"} I:${e.i?\"!\":\"OK\"} MCB:${e.mcb?\"!\":\"OK\"}`}t(),setInterval(t,1e3)}";
const char JS_LOGS[] PROGMEM = "export function initLogs(){const e=document.getElementById(\"view-logs\");e.innerHTML=`<div class=\"card\"><h3>Logs</h3><div id=\"loglist\"><small>Build #1 skeleton — logs coming next.</small></div></div>`}";
const char JS_SETTINGS[] PROGMEM = "import{getSensorCfg,setSensorCfg}from\"/js/api.js\";import{toast}from\"/js/ui.js\";export function initSettings(){const e=document.getElementById(\"view-settings\");e.innerHTML=`<div class=\"card\"><h3>Settings</h3>\n<div class=\"row\">\n  <div class=\"col\"><label>Current Sensor</label>\n    <select id=\"sv-ctype\">\n      <option value=\"ACS712_5A\">ACS712-5A</option>\n      <option value=\"ACS712_20A\">ACS712-20A</option>\n      <option value=\"ACS712_30A\" selected>ACS712-30A</option>\n    </select>\n  </div>\n  <div class=\"col\"><label>mV per A</label><input id=\"sv-mva\" type=\"number\" step=\"0.1\"/></div>\n  <div class=\"col\"><label>ADC Midpoint</label><input id=\"sv-mid\" type=\"number\"/></div>\n</div>\n<div class=\"row\">\n  <div class=\"col\"><label>V scale (V/ADC)</label><input id=\"sv-vs\" type=\"number\" step=\"0.00001\"/></div>\n  <div class=\"col\"><label>Phase Corr (deg)</label><input id=\"sv-ph\" type=\"number\" step=\"0.1\"/></div>\n</div>\n<div class=\"row\">\n  <div class=\"col\"><button class=\"btn btn-primary\" id=\"sv-save\">Save</button></div>\n</div>\n</div>`;const t={ACS712_5A:185,ACS712_20A:100,ACS712_30A:66};function n(){sv_mva.value=t[sv_ctype.value]||66}sv_ctype.onchange=n,n(),getSensorCfg().then(e=>{try{sv_ctype.value=e.current?.type||\"ACS712_30A\",sv_mva.value=null!=e.current?.mV_per_A?e.current?.mV_per_A:t[sv_ctype.value],sv_mid.value=null!=e.current?.adc_midpoint?e.current?.adc_midpoint:2048,sv_vs.value=null!=e.voltage?.scale_V_per_ADC?e.voltage?.scale_V_per_ADC:.122,sv_ph.value=null!=e.voltage?.phase_corr_deg?e.voltage?.phase_corr_deg:2}catch(e){}}),document.getElementById(\"sv-save\").onclick=async()=>{const e=await setSensorCfg({current:{type:sv_ctype.value,mV_per_A:+sv_mva.value,adc_midpoint:+sv_mid.value},voltage:{scale_V_per_ADC:+sv_vs.value,phase_corr_deg:+sv_ph.value}});toast(e?\"Saved\":\"Save failed\")}}";
const char JS_OTA[] PROGMEM = "export function initOTA(){const e=document.getElementById(\"view-ota\");e.innerHTML=`<div class=card><h3>OTA Upload</h3><p>Firmware OTA endpoint will be added in the next push. For now, flash via USB or Web Flasher.</p></div>`}";
const char SVG_LOGO[] PROGMEM = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120 24\"><text x=\"0\" y=\"18\" font-family=\"monospace\" font-size=\"18\" fill=\"#4da3ff\">SPOTWELD+</text></svg>";
const char OTA_HTML[] PROGMEM = "<!doctype html><html><body><h3>OTA</h3><p>Coming soon.</p></body></html>";
